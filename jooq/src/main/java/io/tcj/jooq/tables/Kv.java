/*
 * This file is generated by jOOQ.
 */
package io.tcj.jooq.tables;


import io.tcj.jooq.Keys;
import io.tcj.jooq.Public;
import io.tcj.jooq.tables.records.KvRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kv extends TableImpl<KvRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.kv</code>
     */
    public static final Kv KV = new Kv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KvRecord> getRecordType() {
        return KvRecord.class;
    }

    /**
     * The column <code>public.kv.id</code>.
     */
    public final TableField<KvRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.kv.created_at</code>.
     */
    public final TableField<KvRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.kv.updated_at</code>.
     */
    public final TableField<KvRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.kv.version</code>.
     */
    public final TableField<KvRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.kv.feed_sync_id</code>.
     */
    public final TableField<KvRecord, Long> FEED_SYNC_ID = createField(DSL.name("feed_sync_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.kv.shard</code>.
     */
    public final TableField<KvRecord, Integer> SHARD = createField(DSL.name("shard"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.kv.ns</code>.
     */
    public final TableField<KvRecord, String> NS = createField(DSL.name("ns"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.kv.k</code>.
     */
    public final TableField<KvRecord, String> K = createField(DSL.name("k"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.kv.v</code>.
     */
    public final TableField<KvRecord, String> V = createField(DSL.name("v"), SQLDataType.VARCHAR(4096), this, "");

    private Kv(Name alias, Table<KvRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kv(Name alias, Table<KvRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.kv</code> table reference
     */
    public Kv(String alias) {
        this(DSL.name(alias), KV);
    }

    /**
     * Create an aliased <code>public.kv</code> table reference
     */
    public Kv(Name alias) {
        this(alias, KV);
    }

    /**
     * Create a <code>public.kv</code> table reference
     */
    public Kv() {
        this(DSL.name("kv"), null);
    }

    public <O extends Record> Kv(Table<O> child, ForeignKey<O, KvRecord> key) {
        super(child, key, KV);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<KvRecord, Integer> getIdentity() {
        return (Identity<KvRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<UniqueKey<KvRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.U_NS_K);
    }

    @Override
    public TableField<KvRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Kv as(String alias) {
        return new Kv(DSL.name(alias), this);
    }

    @Override
    public Kv as(Name alias) {
        return new Kv(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kv rename(String name) {
        return new Kv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kv rename(Name name) {
        return new Kv(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, LocalDateTime, LocalDateTime, Integer, Long, Integer, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
